{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","canvasRef","useRef","contextRef","useState","isDrawing","setIsDrawing","useEffect","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","ref","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","onMouseMove","lineTo","stroke","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oLA0CeA,MAxCf,WACC,IAAMC,EAAYC,iBAAO,MACnBC,EAAaD,iBAAO,MAFZ,EAGsBE,oBAAS,GAH/B,mBAGNC,EAHM,KAGKC,EAHL,KAqCd,OAhCAC,qBAAU,WACT,IAAMC,EAASP,EAAUQ,QACzBD,EAAOE,MAA4B,EAApBC,OAAOC,WACtBJ,EAAOK,OAA8B,EAArBF,OAAOG,YACvBN,EAAOO,MAAML,MAAb,UAAwBC,OAAOC,WAA/B,MACAJ,EAAOO,MAAMF,OAAb,UAAyBF,OAAOG,YAAhC,MAEA,IAAME,EAAUR,EAAOS,WAAW,MAClCD,EAAQE,MAAM,EAAG,GACjBF,EAAQG,QAAU,QAClBH,EAAQI,YAAc,QACtBJ,EAAQK,UAAY,EACpBlB,EAAWM,QAAUO,IACnB,IAmBI,4BAAQM,IAAKrB,EAAWsB,YAlBV,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACfC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QACjBvB,EAAWM,QAAQkB,YACnBxB,EAAWM,QAAQmB,OAAOH,EAASC,GACnCpB,GAAa,IAc4CuB,UAZpC,SAAC,GAAoB,EAAlBL,YACxBrB,EAAWM,QAAQqB,YACnBxB,GAAa,IAUsEyB,YARvE,SAAC,GAAqB,IAAnBP,EAAkB,EAAlBA,YACPC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QACZrB,IAGLF,EAAWM,QAAQuB,OAAOP,EAASC,GACnCvB,EAAWM,QAAQwB,cCzBDC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ef817ae7.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\nfunction App() {\n\tconst canvasRef = useRef(null)\n\tconst contextRef = useRef(null)\n\tconst [ isDrawing, setIsDrawing ] = useState(false)\n\n\tuseEffect(() => {\n\t\tconst canvas = canvasRef.current\n\t\tcanvas.width = window.innerWidth * 2\n\t\tcanvas.height = window.innerHeight * 2\n\t\tcanvas.style.width = `${window.innerWidth}px`\n\t\tcanvas.style.height = `${window.innerHeight}px`\n\n\t\tconst context = canvas.getContext('2d')\n\t\tcontext.scale(2, 2)\n\t\tcontext.lineCap = 'round'\n\t\tcontext.strokeStyle = 'black'\n\t\tcontext.lineWidth = 5\n\t\tcontextRef.current = context\n\t}, [])\n\tconst startDrawing = ({ nativeEvent }) => {\n\t\tconst { offsetX, offsetY } = nativeEvent\n\t\tcontextRef.current.beginPath()\n\t\tcontextRef.current.moveTo(offsetX, offsetY)\n\t\tsetIsDrawing(true)\n\t}\n\tconst finishDrawing = ({ nativeEvent }) => {\n\t\tcontextRef.current.closePath()\n\t\tsetIsDrawing(false)\n\t}\n\tconst draw = ({ nativeEvent }) => {\n\t\tconst { offsetX, offsetY } = nativeEvent\n\t\tif (!isDrawing) {\n\t\t\treturn\n\t\t}\n\t\tcontextRef.current.lineTo(offsetX, offsetY)\n\t\tcontextRef.current.stroke()\n\t}\n\treturn <canvas ref={canvasRef} onMouseDown={startDrawing} onMouseUp={finishDrawing} onMouseMove={draw} />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}